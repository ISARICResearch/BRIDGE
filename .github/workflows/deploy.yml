name: Deploy Bridge to EC2

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Required to check out the repo

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Assume AWS IAM Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsDeploy

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Verify ECR Repository Exists
        run: |
          aws ecr describe-repositories --repository-names $(echo ${{ secrets.ECR_REPOSITORY }} | awk -F'/' '{print $NF}') --region eu-west-2

      - name: Build and Push Docker Image
        run: |
          docker build -t isaric-bridge .
          docker tag isaric-bridge:latest ${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Create private key file
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: SSH into EC2 and Deploy Container
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_HOST }} <<'EOF'
          set -Eeuo pipefail
          trap 'echo "Error on line \$LINENO"; exit 1' ERR
          
          AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
          
          # ECR login
          aws ecr get-login-password --region eu-west-2 \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
          
          # Stop & remove previous container
          docker stop isaric-bridge 2>/dev/null || true
          docker rm -v isaric-bridge 2>/dev/null || true
          
          # Pull and start
          docker pull ${{ secrets.ECR_REPOSITORY }}:latest
          docker run -d --restart unless-stopped --name isaric-bridge \
            --log-driver json-file --log-opt max-size=10m --log-opt max-file=3 \
            -p 8050:8050 \
            ${{ secrets.ECR_REPOSITORY }}:latest
          
          # verify it's up
          sleep 3
          if ! docker ps --filter "name=^/isaric-bridge$" --format '{{.Status}}' | grep -q .; then
            echo "Container failed to start"
            docker logs --tail 200 isaric-bridge || true
            exit 1
          fi
          
          # Clean up
          docker image prune -f
          docker volume prune -f
          EOF

      - name: Cleanup private key
        run: rm -f private_key.pem
